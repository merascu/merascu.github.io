(declare-const x11 Int)
(declare-const x12 Int)
(declare-const x13 Int)
(declare-const x21 Int)
(declare-const x22 Int)
(declare-const x23 Int)
(declare-const x31 Int)
(declare-const x32 Int)
(declare-const x33 Int)

(declare-const y1 Int)
(declare-const y2 Int)
(declare-const y3 Int)

(assert (or (= x11 0) (= x11 1)))
(assert (or (= x12 0) (= x12 1)))
(assert (or (= x13 0) (= x13 1)))
(assert (or (= x21 0) (= x21 1)))
(assert (or (= x22 0) (= x22 1)))
(assert (or (= x23 0) (= x23 1)))
(assert (or (= x31 0) (= x31 1)))
(assert (or (= x32 0) (= x32 1)))
(assert (or (= x33 0) (= x33 1)))

(assert (or (= y1 0) (= y1 1)))
(assert (or (= y2 0) (= y2 1)))
(assert (or (= y3 0) (= y3 1)))

(assert (= ( + x11 x12 x13) 1))
(assert (= ( + x21 x22 x23) 1))
(assert (= ( + x31 x32 x33) 1))

;(assert (=> (= y1 1) (or (= x11 1) (= x21 1) (= x31 1))))
;(assert (=> (= y2 1) (or (= x12 1) (= x22 1) (= x32 1))))
;(assert (=> (= y3 1) (or (= x13 1) (= x23 1) (= x33 1))))

(assert (=> (or (= x11 1) (= x21 1) (= x31 1)) (= y1 1)))
(assert (=> (or (= x12 1) (= x22 1) (= x32 1)) (= y2 1)))
(assert (=> (or (= x13 1) (= x23 1) (= x33 1)) (= y3 1)))

(assert (<= (+ (* x11 100) (* x11 50) (* x11 15)) (* y1 100)))
(assert (<= (+ (* x12 100) (* x12 50) (* x12 15)) (* y2 75)))
(assert (<= (+ (* x13 100) (* x13 50) (* x13 15)) (* y3 200)))

; (*) first the number of servers is minimized
(minimize (+ y1 y2 y3))
; (**) afterwards the price
(minimize (+ (* 10 y1) (* 5 y2) (* 20 y3)))
; if we want that (**) is the first minimized constraint we use the option (set-option :opt.priority pareto) before the check-sat command
;(set-option :opt.priority pareto)
(check-sat)
(get-model)